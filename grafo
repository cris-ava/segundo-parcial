"""
2 - Dado un grafo no dirigido con personajes de la saga Star Wars, implementar los algoritmos necesarios
 para resolver las siguientes tareas:a. cada vértice debe almacenar el nombre de un personaje, las aristas
  representan la cantidad de episodios en los que aparecieron juntos ambos personajes que se relacionan;
b. hallar el árbol de expansión mínimo desde el vértice que contiene a C-3PO, Yoda y la princesa Leia;
c. determinar cuales personajes comparten con otro dos episodios o mas (mostrar el par de pesonajes);
d. cargue al menos los siguientes personajes: Luke Skywalker, Darth Vader, Yoda, Boba Fett, C-3PO, Leia,
 Rey, Kylo Ren, Chewbacca, Han Solo, R2-D2, Obi-Wan kenobi; BB-8;
e. determinar que personaje es el que a compartido episodio con la mayor cantidad del resto de los
 personajes.
 """
from heap import HeapMin, HeapMax
from cola import Cola
from grafo import (
    Grafo
    
)

g = Grafo(dirigido=False)


g.insertar_vertice('Luke Skywalker')#1
g.insertar_vertice('Darth Vader')#2
g.insertar_vertice('Yoda')#3
g.insertar_vertice('Boba Fett')#4
g.insertar_vertice('C-3PO')#5
g.insertar_vertice('Leia')#6
g.insertar_vertice('Rey')#7
g.insertar_vertice('Kylo Ren')#8
g.insertar_vertice('Chewbacca')#9
g.insertar_vertice('Han Solo')#10
g.insertar_vertice('R2-D2')
g.insertar_vertice('Obi-Wan kenobi')
g.insertar_vertice('BB-8')

g.insertar_arista('Luke Skywalker', 'Yoda', 5)
g.insertar_arista('Boba Fett', 'Darth Vader', 2)
g.insertar_arista('C-3PO', 'Luke Skywalker', 6)
g.insertar_arista('Chewbacca', 'Obi-Wan kenobi', 1)
g.insertar_arista('BB-8', 'Han Solo', 2)
g.insertar_arista('Obi-Wan kenobi', 'Leia', 4)
g.insertar_arista('Kylo Ren', 'Darth Vader', 5)
g.insertar_arista('Leia', 'Boba Fett', 1)
g.insertar_arista('Yoda', 'R2-D2', 4)
g.insertar_arista('C-3PO', 'Luke Skywalker', 3)
g.insertar_arista('Rey', 'Yoda', 4)
g.insertar_arista('Darth Vader', 'Obi-Wan kenobi', 1)
g.insertar_arista('Han Solo', 'Yoda', 4)
g.insertar_arista('Chewbacca', 'Darth Vader', 3)
g.insertar_arista('BB-8', 'Boba Fett', 4)
g.insertar_arista('Darth Vade', 'Rey', 2)
g.insertar_arista('Yoda', 'Obi-Wan kenobi', 1)
g.insertar_arista('Luke Skywalker', 'Darth Vader', 2)
g.insertar_arista('C-3PO', 'BB-8', 1)


print('b. obtener el árbol de expansión mínima ')
print('Kruskal:\n',g.kruskal_minimo())
print()

#arbol_min = g.kruskal_minimo()
#
#arbol_min = g.kruskal()
#
#arbol_min = arbol_min[0].split('-')
#peso_total = 0
#for nodo in arbol_min:
#    nodo = nodo.split(';')
#    peso_total += int(nodo[2])
#    print(f'{nodo[0]}-{nodo[1]}-{nodo[2]}')
#    
#print(f"el peso total es {peso_total}")


g.barrido_profundidad('C-3PO')
print()
g.barrido_profundidad('Yoda')
print('------------------------------------------')
g.barrido_profundidad('Leia')
print()
    
print('Desde C-3PO')
g.barrido_profundidad('C-3PO')
print()

print('Desde Yoda')
g.barrido_profundidad('Yoda')
print()

print('Desde Leia')
g.barrido_profundidad('Leia')
print()
